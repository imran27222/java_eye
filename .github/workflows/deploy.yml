name: Deploy to VPS without GitHub Deploy Key

on:
  push:
    branches:
      - deployment_test

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check VPS_HOST and VPS_USER
        run: |
          echo "VPS_HOST is set to: ${{ secrets.VPS_HOST }}"
          echo "VPS_USER is set to: ${{ secrets.VPS_USER }}"

      - name: Check if VPS_SSH_KEY is non-empty (do NOT print it)
        run: |
          if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "‚ùå VPS_SSH_KEY is empty or not set!"
            exit 1
          else
            echo "‚úÖ VPS_SSH_KEY is set and non-empty."
          fi

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "üîê SSH private key saved and permissions set."
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          echo "üóùÔ∏è Known hosts updated with ${{ secrets.VPS_HOST }}"

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo '‚úÖ Connected to VPS'"

      - name: Log SSH test success
        if: ${{ success() }}
        run: echo "üéâ SSH connection test succeeded."

      - name: Log SSH test failure
        if: ${{ failure() }}
        run: echo "‚ùå SSH connection test failed. Check keys and host."

      - name: Ensure target directory exists
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /home/${{ secrets.VPS_USER }}/app"


      - name: Sync project files to VPS
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_rsa" ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/app
            
      - name: Copy .env.development to VPS
        run: |
            pwd
            
            scp -i ~/.ssh/id_rsa .env.development ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/app/.env.development

      - name: SSH into VPS and deploy
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd /home/${{ secrets.VPS_USER }}/app

          docker-compose down
          docker-compose up -d --build
          EOF



  